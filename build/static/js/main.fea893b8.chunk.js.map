{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","style","display","flexDirection","justifyContent","alignItems","window","location","pathname","width","cursor","onClick","replace","src","alt","height","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NA4BeA,EA1Bf,iLAEI,OACE,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,eAAgB,SAAUC,WAAY,WAG9D,eAA7BC,OAAOC,SAASC,UAA0D,YAA7BF,OAAOC,SAASC,SAAyB,6BACrF,sEACO,wCAAG,gDACR,yBAAKP,MAAO,CAAEC,QAAS,OAAQO,MAAO,MAAOL,eAAgB,eAAgBC,WAAY,WACvF,yBAAKJ,MAAO,CAAES,OAAQ,WAAaC,QAAS,kBAAML,OAAOC,SAASK,QAAQ,gBACxE,yBAAKC,IAAI,iBAAiBC,IAAI,YAAYC,OAAO,MAAMN,MAAM,QAC7D,0CAEF,yBAAKR,MAAO,CAAES,OAAQ,WAAaC,QAAS,kBAAML,OAAOC,SAASK,QAAQ,aACxE,yBAAKC,IAAI,qBAAqBC,IAAI,SAASC,OAAO,MAAMN,MAAM,QAC9D,8CAhBhB,GAAyBO,aCULC,QACW,cAA7BX,OAAOC,SAASW,UAEa,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fea893b8.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class App extends Component {\n  render() {\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', justifyContent: \"center\", alignItems: \"center\" }}>\n\n\n        {window.location.pathname === \"/barcelona\" || window.location.pathname === \"/madrid\" ? <div>\n          <h1>Please wait for the app install popup</h1>\n        </div> : <> <h1>Select Your Club</h1>\n            <div style={{ display: 'flex', width: \"30%\", justifyContent: \"space-evenly\", alignItems: \"center\" }} >\n              <div style={{ cursor: 'pointer' }} onClick={() => window.location.replace(\"/barcelona\")}>\n                <img src=\"/barcelona.png\" alt=\"barcelona\" height=\"100\" width=\"100\" />\n                <h2>Barcelona</h2>\n              </div>\n              <div style={{ cursor: 'pointer' }} onClick={() => window.location.replace(\"/madrid\")} >\n                <img src=\"/realMadrid128.png\" alt=\"madrid\" height=\"100\" width=\"100\" />\n                <h2>Madrid</h2>\n              </div>\n\n            </div></>}\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}